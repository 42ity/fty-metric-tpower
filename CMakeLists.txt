################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################

########################################################################
# Project setup
########################################################################
cmake_minimum_required(VERSION 2.8)
project(fty_metric_tpower)
enable_language(C)
enable_testing()

set(SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}")
set(CMAKE_EXPORT_COMPILE_COMMANDS 1)
# Select flags
SET(CMAKE_C_FLAGS_RELEASE "-O3")

# Will be used to add flags to pkg-config useful when apps want to statically link
set(pkg_config_libs_private "")

########################################################################
# options
########################################################################
if (NOT CMAKE_BUILD_TYPE)
    if (EXISTS "${SOURCE_DIR}/.git")
        set (CMAKE_BUILD_TYPE Debug)
    else ()
        set (CMAKE_BUILD_TYPE Release)
    endif ()
endif ()
if (${CMAKE_BUILD_TYPE} STREQUAL "Debug")
    OPTION (ENABLE_DRAFTS "Build and install draft classes and methods" ON)
else ()
    OPTION (ENABLE_DRAFTS "Build and install draft classes and methods" OFF)
endif ()
IF (ENABLE_DRAFTS)
    ADD_DEFINITIONS (-DFTY_METRIC_TPOWER_BUILD_DRAFT_API)
ENDIF (ENABLE_DRAFTS)

########################################################################
# platform.h
########################################################################
include(CheckIncludeFile)
CHECK_INCLUDE_FILE("linux/wireless.h" HAVE_LINUX_WIRELESS_H)
CHECK_INCLUDE_FILE("net/if_media.h" HAVE_NET_IF_MEDIA_H)

include(CheckFunctionExists)
CHECK_FUNCTION_EXISTS("getifaddrs" HAVE_GETIFADDRS)
CHECK_FUNCTION_EXISTS("freeifaddrs" HAVE_FREEIFADDRS)

include(CheckIncludeFiles)
check_include_files("sys/socket.h;net/if.h" HAVE_NET_IF_H)
if (NOT HAVE_NET_IF_H)
    CHECK_INCLUDE_FILE("net/if.h" HAVE_NET_IF_H)
endif()

file(WRITE "${SOURCE_DIR}/src/platform.h.in" "
#cmakedefine HAVE_LINUX_WIRELESS_H
#cmakedefine HAVE_NET_IF_H
#cmakedefine HAVE_NET_IF_MEDIA_H
#cmakedefine HAVE_GETIFADDRS
#cmakedefine HAVE_FREEIFADDRS
")

configure_file("${SOURCE_DIR}/src/platform.h.in" "${SOURCE_DIR}/src/platform.h")

#The MSVC C compiler is too out of date,
#so the sources have to be compiled as c++
if (MSVC)
    enable_language(CXX)
    file(GLOB sources "${SOURCE_DIR}/src/*.c")
    set_source_files_properties(
        ${sources}
        PROPERTIES LANGUAGE CXX
    )
    set(MORE_LIBRARIES ws2_32 Rpcrt4 Iphlpapi)
endif()

# required libraries for mingw
if (MINGW)
    set(MORE_LIBRARIES -lws2_32 -lrpcrt4 -liphlpapi)
endif()

# required libraries for cygwin
if (CYGWIN)
    set(MORE_LIBRARIES)
endif()

list(APPEND CMAKE_MODULE_PATH "${SOURCE_DIR}")
set(OPTIONAL_LIBRARIES)

########################################################################
# LIBZMQ dependency
########################################################################
find_package(libzmq REQUIRED)
IF (LIBZMQ_FOUND)
    include_directories(${LIBZMQ_INCLUDE_DIRS})
    list(APPEND MORE_LIBRARIES ${LIBZMQ_LIBRARIES})
    set(pkg_config_libs_private "${pkg_config_libs_private} -lzmq")
ELSE (LIBZMQ_FOUND)
    message( FATAL_ERROR "libzmq not found." )
ENDIF (LIBZMQ_FOUND)

########################################################################
# CZMQ dependency
########################################################################
find_package(czmq REQUIRED)
IF (CZMQ_FOUND)
    include_directories(${CZMQ_INCLUDE_DIRS})
    list(APPEND MORE_LIBRARIES ${CZMQ_LIBRARIES})
    set(pkg_config_libs_private "${pkg_config_libs_private} -lczmq")
ELSE (CZMQ_FOUND)
    message( FATAL_ERROR "czmq not found." )
ENDIF (CZMQ_FOUND)

########################################################################
# MALAMUTE dependency
########################################################################
find_package(malamute REQUIRED)
IF (MALAMUTE_FOUND)
    include_directories(${MALAMUTE_INCLUDE_DIRS})
    list(APPEND MORE_LIBRARIES ${MALAMUTE_LIBRARIES})
    set(pkg_config_libs_private "${pkg_config_libs_private} -lmlm")
ELSE (MALAMUTE_FOUND)
    message( FATAL_ERROR "malamute not found." )
ENDIF (MALAMUTE_FOUND)

########################################################################
# FTY-PROTO dependency
########################################################################
find_package(fty-proto REQUIRED)
IF (FTY-PROTO_FOUND)
    include_directories(${FTY-PROTO_INCLUDE_DIRS})
    list(APPEND MORE_LIBRARIES ${FTY-PROTO_LIBRARIES})
    set(pkg_config_libs_private "${pkg_config_libs_private} -lfty-proto")
ELSE (FTY-PROTO_FOUND)
    message( FATAL_ERROR "fty-proto not found." )
ENDIF (FTY-PROTO_FOUND)

########################################################################
# CXXTOOLS dependency
########################################################################
find_package(cxxtools REQUIRED)
IF (CXXTOOLS_FOUND)
    include_directories(${CXXTOOLS_INCLUDE_DIRS})
    list(APPEND MORE_LIBRARIES ${CXXTOOLS_LIBRARIES})
    set(pkg_config_libs_private "${pkg_config_libs_private} -lcxxtools")
ELSE (CXXTOOLS_FOUND)
    message( FATAL_ERROR "cxxtools not found." )
ENDIF (CXXTOOLS_FOUND)

########################################################################
# TNTDB dependency
########################################################################
find_package(tntdb REQUIRED)
IF (TNTDB_FOUND)
    include_directories(${TNTDB_INCLUDE_DIRS})
    list(APPEND MORE_LIBRARIES ${TNTDB_LIBRARIES})
    set(pkg_config_libs_private "${pkg_config_libs_private} -ltntdb")
ELSE (TNTDB_FOUND)
    message( FATAL_ERROR "tntdb not found." )
ENDIF (TNTDB_FOUND)

########################################################################
# includes
########################################################################
set (fty_metric_tpower_headers
    include/fty_metric_tpower_library.h
    include/fty_metric_tpower.h
    include/fty_metric_tpower_server.h
    src/metricinfo.h
    src/calc_power.h
    src/tpowerconfiguration.h
    src/metriclist.h
    src/tp_unit.h
    src/proto_metric_unavailable.h
)

source_group ("Header Files" FILES ${fty_metric_tpower_headers})
install(FILES ${fty_metric_tpower_headers} DESTINATION include)

########################################################################
# library
########################################################################
include_directories("${SOURCE_DIR}/src" "${SOURCE_DIR}/include")
set (fty_metric_tpower_sources
    src/metricinfo.c
    src/calc_power.c
    src/tpowerconfiguration.c
    src/metriclist.c
    src/tp_unit.c
    src/proto_metric_unavailable.c
    src/fty_metric_tpower_server.c
)
source_group("Source Files" FILES ${fty_metric_tpower_sources})
if (NOT DEFINED BUILD_SHARED_LIBS)
    SET(BUILD_SHARED_LIBS ON)
endif()
add_library(fty_metric_tpower ${fty_metric_tpower_sources})
set_target_properties(fty_metric_tpower
    PROPERTIES DEFINE_SYMBOL "FTY_METRIC_TPOWER_EXPORTS"
)
set_target_properties(fty_metric_tpower
    PROPERTIES LIBRARY_OUTPUT_DIRECTORY "${SOURCE_DIR}/src"
)
target_link_libraries(fty_metric_tpower
    ${ZEROMQ_LIBRARIES} ${MORE_LIBRARIES}
)

install(TARGETS fty_metric_tpower
    LIBRARY DESTINATION "lib${LIB_SUFFIX}" # .so file
    ARCHIVE DESTINATION "lib${LIB_SUFFIX}" # .lib file
    RUNTIME DESTINATION bin              # .dll file
)

########################################################################
# pkgconfig
########################################################################
set (VERSION "1.0.0")
set (prefix "${CMAKE_INSTALL_PREFIX}")
set (exec_prefix "\${prefix}")
set (libdir "\${prefix}/lib${LIB_SUFFIX}")
set (includedir "\${prefix}/include")
IF (ENABLE_DRAFTS)
    set (pkg_config_defines "-DFTY_METRIC_TPOWER_BUILD_DRAFT_API=1")
ELSE (ENABLE_DRAFTS)
    set (pkg_config_defines "")
ENDIF (ENABLE_DRAFTS)
configure_file(
    "${SOURCE_DIR}/src/libfty_metric_tpower.pc.in"
    "${SOURCE_DIR}/src/libfty_metric_tpower.pc"
@ONLY)

install(
    FILES "${SOURCE_DIR}/src/libfty_metric_tpower.pc"
    DESTINATION "lib${LIB_SUFFIX}/pkgconfig"
)

########################################################################
# executables
########################################################################
add_executable(
    fty-metric-tpower
    "${SOURCE_DIR}/src/fty-metric-tpower.c"
)
target_link_libraries(
    fty-metric-tpower
    fty_metric_tpower
    ${LIBZMQ_LIBRARIES}
    ${CZMQ_LIBRARIES}
    ${MALAMUTE_LIBRARIES}
    ${FTY-PROTO_LIBRARIES}
    ${CXXTOOLS_LIBRARIES}
    ${TNTDB_LIBRARIES}
    ${OPTIONAL_LIBRARIES}
)
set_target_properties(
    fty-metric-tpower
    PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${SOURCE_DIR}/src"
)
add_executable(
    fty_metric_tpower_selftest
    "${SOURCE_DIR}/src/fty_metric_tpower_selftest.c"
)
target_link_libraries(
    fty_metric_tpower_selftest
    fty_metric_tpower
    ${LIBZMQ_LIBRARIES}
    ${CZMQ_LIBRARIES}
    ${MALAMUTE_LIBRARIES}
    ${FTY-PROTO_LIBRARIES}
    ${CXXTOOLS_LIBRARIES}
    ${TNTDB_LIBRARIES}
    ${OPTIONAL_LIBRARIES}
)
set_target_properties(
    fty_metric_tpower_selftest
    PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${SOURCE_DIR}/src"
)

########################################################################
# tests
########################################################################
set(CLASSTEST_TIMEOUT 60 CACHE STRING "Timeout of the selftest of a class")
set(TOTAL_TIMEOUT 600 CACHE STRING "Timout of the total testsuite")

if(UNIX)
    find_program(MEMORYCHECK_COMMAND valgrind)
    set(MEMORYCHECK_COMMAND_OPTIONS "--leak-check=full --show-reachable=yes
                                     --error-exitcode=1
                                     --suppressions=src/.valgrind.supp")
endif()

set(TEST_CLASSES
    fty_metric_tpower_server
)

foreach(TEST_CLASS ${TEST_CLASSES})
    add_test(
        NAME ${TEST_CLASS}
        COMMAND fty_metric_tpower_selftest --continue --verbose --test ${TEST_CLASS}
    )
    set_tests_properties(
        ${TEST_CLASS}
        PROPERTIES TIMEOUT ${CLASSTEST_TIMEOUT}
    )
endforeach(TEST_CLASS)

include(CTest)

########################################################################
# cleanup
########################################################################
add_custom_target (distclean @echo Cleaning for source distribution)

set(cmake_generated ${CMAKE_BINARY_DIR}/CMakeCache.txt
                    ${CMAKE_BINARY_DIR}/cmake_install.cmake
                    ${CMAKE_BINARY_DIR}/Makefile
                    ${CMAKE_BINARY_DIR}/CMakeFiles
                    ${CMAKE_BINARY_DIR}/CTestTestfile.cmake
                    ${CMAKE_BINARY_DIR}/DartConfiguration.tcl
                    ${CMAKE_BINARY_DIR}/Testing
                    ${CMAKE_BINARY_DIR}/compile_commands.json
                    ${CMAKE_BINARY_DIR}/src/platform.h
                    ${CMAKE_BINARY_DIR}/src/libfty_metric_tpower.pc
                    ${CMAKE_BINARY_DIR}/src/libfty_metric_tpower.so
                    ${CMAKE_BINARY_DIR}/src/fty-metric-tpower_selftest
                    ${CMAKE_BINARY_DIR}/src/fty-metric-tpower
                    ${CMAKE_BINARY_DIR}/src/fty_metric_tpower_selftest
)

add_custom_command(
    DEPENDS clean
    COMMENT "distribution clean"
    COMMAND rm
    ARGS    -rf CMakeTmp ${cmake_generated}
    TARGET  distclean
)

########################################################################
# summary
########################################################################
message ("")
message (STATUS "******************* Configuration Summary *******************")
message (STATUS "General:")
message (STATUS "  Version           :   ${VERSION}")
message (STATUS "  System            :   ${CMAKE_SYSTEM_NAME}")
message (STATUS "  C compiler        :   ${CMAKE_C_COMPILER}")
message (STATUS "  Debug C flags     :   ${CMAKE_C_FLAGS_DEBUG} ${CMAKE_C_FLAGS}")
message (STATUS "  Release C flags   :   ${CMAKE_C_FLAGS_RELEASE} ${CMAKE_C_FLAGS}")
message (STATUS "  Build type        :   ${CMAKE_BUILD_TYPE}")
IF (ENABLE_DRAFTS)
message (STATUS "  Draft API         :   Yes")
ELSE (ENABLE_DRAFTS)
message (STATUS "  Draft API         :   No")
ENDIF (ENABLE_DRAFTS)
message (STATUS "")
message (STATUS "Dependencies:")
include(FeatureSummary)
feature_summary (WHAT ALL FATAL_ON_MISSING_REQUIRED_PACKAGES)
message (STATUS "")
message (STATUS "Install:")
message (STATUS "  Install prefix    :" "${CMAKE_INSTALL_PREFIX}")
message (STATUS "")
message (STATUS "************************* Options ***************************")
message (STATUS "Options:")
message (STATUS "  Use the Draft API (default = yes):")
message (STATUS "  -DENABLE-DRAFTS=[yes|no]")
message (STATUS "")
message (STATUS "*************************************************************")
message (STATUS "Configuration complete! Now procced with:")
message (STATUS "  'make'                compile the project")
message (STATUS "  'make test'           run the project's selftest")
message (STATUS "  'make install'        install the project to ${CMAKE_INSTALL_PREFIX}")
message (STATUS "")
message (STATUS "Further options are:")
message (STATUS "  'ctest -T memcheck'   run the project's selftest with")
message (STATUS "                        valgrind to check for memory leaks")
message (STATUS "")

################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
